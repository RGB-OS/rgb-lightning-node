name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - master  # Trigger the build-and-push job on push to master
  workflow_dispatch:  # Allow manual triggering of the retag-and-push job

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # Only run on the master branch

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Log in to AWS ECR
      env:
        AWS_REGION: 'us-east-2'
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}

    - name: Build Docker Image
      run: |
        docker build -t rgb-lightning-node:latest .

    - name: Tag Docker Image
      run: |
        docker tag rgb-lightning-node:latest ${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

    - name: Push Docker Image to ECR
      run: |
        docker push ${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

    - name: Push Docker Image to ECR
      run: |
        docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }} ${{ secrets.AWS_ECR_REPOSITORY }}:latest && docker push ${{ secrets.AWS_ECR_REPOSITORY }}:latest

    - name: Verify pushed image
      run: |
        echo "Image ${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }} has been successfully pushed."
    
    - name: Clone Test Repository
      run: |
        git clone https://github.com/RGB-OS/thunderstack-tests.git test-repo

    - name: Set up Node.js in test-repo
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: test-repo/package-lock.json
        
    - name: Install Test Dependencies
      run: |
        cd test-repo
        npm install
        
    - name: Set up Environment Variables
      run: |
        echo "CLOUD_API=${{ secrets.TEST_CLOUD_API }}" >> $GITHUB_ENV
        echo "AUTH_TOKEN=${{ secrets.TEST_AUTH_TOKEN }}" >> $GITHUB_ENV
        echo "NODE_PASSWORD=12345678" >> $GITHUB_ENV
        echo "NETWORK=regtest" >> $GITHUB_ENV
      working-directory: test-repo
      
    - name: Run Playwright Tests
      run: |
        cd test-repo
        NODE_NAME=Node_A npx playwright test tests/api.node-run.test.ts
        NODE_NAME=Node_A npx playwright test tests/api.node-destroy.test.ts   
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: test-repo/playwright-report/
# New job to tag and push the existing image manually
  retag-and-push:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch'  # This job runs only when manually triggered

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Log in to AWS ECR
      env:
        AWS_REGION: 'us-east-2'
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}

    - name: Pull the existing image
      run: |
        docker pull ${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

    - name: Tag image with prod-<commit_id> and prod-latest
      run: |
        docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }} ${{ secrets.AWS_ECR_REPOSITORY }}:prod-latest


    - name: Push prod-latest tag to ECR
      run: |
        docker push ${{ secrets.AWS_ECR_REPOSITORY }}:prod-latest

    - name: Verify pushed image
      run: |
        echo "Image has been successfully tagged and pushed with prod-${{ github.sha }} and prod-latest."
